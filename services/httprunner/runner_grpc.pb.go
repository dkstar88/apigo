// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package httprunner

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HttpRunnerClient is the client API for HttpRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpRunnerClient interface {
	Enqueue(ctx context.Context, in *RunnerConfig, opts ...grpc.CallOption) (*RunnerResponse, error)
	GetRunner(ctx context.Context, in *IdRunnerRequest, opts ...grpc.CallOption) (*RunnerResponse, error)
	GetRunners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunnersResponse, error)
	RemoveRunner(ctx context.Context, in *IdRunnerRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	CancelRunning(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SimpleResponse, error)
	Listen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunnerResponse, error)
}

type httpRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpRunnerClient(cc grpc.ClientConnInterface) HttpRunnerClient {
	return &httpRunnerClient{cc}
}

func (c *httpRunnerClient) Enqueue(ctx context.Context, in *RunnerConfig, opts ...grpc.CallOption) (*RunnerResponse, error) {
	out := new(RunnerResponse)
	err := c.cc.Invoke(ctx, "/httprunner.HttpRunner/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpRunnerClient) GetRunner(ctx context.Context, in *IdRunnerRequest, opts ...grpc.CallOption) (*RunnerResponse, error) {
	out := new(RunnerResponse)
	err := c.cc.Invoke(ctx, "/httprunner.HttpRunner/GetRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpRunnerClient) GetRunners(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunnersResponse, error) {
	out := new(RunnersResponse)
	err := c.cc.Invoke(ctx, "/httprunner.HttpRunner/GetRunners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpRunnerClient) RemoveRunner(ctx context.Context, in *IdRunnerRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/httprunner.HttpRunner/RemoveRunner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpRunnerClient) CancelRunning(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/httprunner.HttpRunner/CancelRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *httpRunnerClient) Listen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunnerResponse, error) {
	out := new(RunnerResponse)
	err := c.cc.Invoke(ctx, "/httprunner.HttpRunner/Listen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpRunnerServer is the server API for HttpRunner service.
// All implementations must embed UnimplementedHttpRunnerServer
// for forward compatibility
type HttpRunnerServer interface {
	Enqueue(context.Context, *RunnerConfig) (*RunnerResponse, error)
	GetRunner(context.Context, *IdRunnerRequest) (*RunnerResponse, error)
	GetRunners(context.Context, *emptypb.Empty) (*RunnersResponse, error)
	RemoveRunner(context.Context, *IdRunnerRequest) (*SimpleResponse, error)
	CancelRunning(context.Context, *emptypb.Empty) (*SimpleResponse, error)
	Listen(context.Context, *emptypb.Empty) (*RunnerResponse, error)
	mustEmbedUnimplementedHttpRunnerServer()
}

// UnimplementedHttpRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedHttpRunnerServer struct {
}

func (UnimplementedHttpRunnerServer) Enqueue(context.Context, *RunnerConfig) (*RunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedHttpRunnerServer) GetRunner(context.Context, *IdRunnerRequest) (*RunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunner not implemented")
}
func (UnimplementedHttpRunnerServer) GetRunners(context.Context, *emptypb.Empty) (*RunnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunners not implemented")
}
func (UnimplementedHttpRunnerServer) RemoveRunner(context.Context, *IdRunnerRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRunner not implemented")
}
func (UnimplementedHttpRunnerServer) CancelRunning(context.Context, *emptypb.Empty) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRunning not implemented")
}
func (UnimplementedHttpRunnerServer) Listen(context.Context, *emptypb.Empty) (*RunnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedHttpRunnerServer) mustEmbedUnimplementedHttpRunnerServer() {}

// UnsafeHttpRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpRunnerServer will
// result in compilation errors.
type UnsafeHttpRunnerServer interface {
	mustEmbedUnimplementedHttpRunnerServer()
}

func RegisterHttpRunnerServer(s grpc.ServiceRegistrar, srv HttpRunnerServer) {
	s.RegisterService(&_HttpRunner_serviceDesc, srv)
}

func _HttpRunner_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpRunnerServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httprunner.HttpRunner/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpRunnerServer).Enqueue(ctx, req.(*RunnerConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpRunner_GetRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpRunnerServer).GetRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httprunner.HttpRunner/GetRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpRunnerServer).GetRunner(ctx, req.(*IdRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpRunner_GetRunners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpRunnerServer).GetRunners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httprunner.HttpRunner/GetRunners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpRunnerServer).GetRunners(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpRunner_RemoveRunner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdRunnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpRunnerServer).RemoveRunner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httprunner.HttpRunner/RemoveRunner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpRunnerServer).RemoveRunner(ctx, req.(*IdRunnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpRunner_CancelRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpRunnerServer).CancelRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httprunner.HttpRunner/CancelRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpRunnerServer).CancelRunning(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _HttpRunner_Listen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpRunnerServer).Listen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httprunner.HttpRunner/Listen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpRunnerServer).Listen(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpRunner_serviceDesc = grpc.ServiceDesc{
	ServiceName: "httprunner.HttpRunner",
	HandlerType: (*HttpRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _HttpRunner_Enqueue_Handler,
		},
		{
			MethodName: "GetRunner",
			Handler:    _HttpRunner_GetRunner_Handler,
		},
		{
			MethodName: "GetRunners",
			Handler:    _HttpRunner_GetRunners_Handler,
		},
		{
			MethodName: "RemoveRunner",
			Handler:    _HttpRunner_RemoveRunner_Handler,
		},
		{
			MethodName: "CancelRunning",
			Handler:    _HttpRunner_CancelRunning_Handler,
		},
		{
			MethodName: "Listen",
			Handler:    _HttpRunner_Listen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "runner.proto",
}
